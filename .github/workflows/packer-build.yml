name: Packer Build

on:
  pull_request:
    # types:
    #   - closed
    branches:
      - main

jobs:
  build:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Enable MySQL service
      - name: Enable mysql service
        run: sudo systemctl start mysql

      # Create .env file from secrets
      - name: Create .env File
        run: |
          echo "DB_NAME=${{ secrets.MYSQL_DATABASE }}" > src/.env
          echo "DB_USERNAME=${{ secrets.MYSQL_USER }}" >> src/.env
          echo "DB_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> src/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> src/.env
          echo "DB_PORT=${{ secrets.PORT }}" >> src/.env
          echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> src/.env

      # Install project dependencies
      - name: Install Project Dependencies
        run: npm install
        working-directory: src

      # Wait for MySQL to be ready
      - name: Wait for MySQL to be Ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      # Initialize MySQL database as root
      - name: Initialize MySQL Database as Root
        run: |
          sudo mysql -u"${{ secrets.MYSQL_USER }}" --password="${{ secrets.MYSQL_ROOT_PASSWORD }}" <<EOF
          CREATE DATABASE IF NOT EXISTS \`${{ secrets.MYSQL_DATABASE }}\`;
          EOF

      # Run tests
      - name: Run Tests
        run: npm test
        env:
          DB_NAME: ${{ secrets.MYSQL_DATABASE }}
          DB_USERNAME: ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.PORT }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
        working-directory: src

      # Install Packer
      - name: Install Packer
        uses: hashicorp/setup-packer@v2

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # # Authenticate with Google Cloud
      # - name: Authenticate with Google Cloud
      #   uses: google-github-actions/auth@v2
      #   with:
      #     credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

      # # Create JSON file from secret for Google Cloud authentication
      # - name: Create JSON File from Secret
      #   run: |
      #     echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' | jq '.' > secret.json

      # Initialize Packer plugins
      - name: Initialize Packer Plugins
        run: packer init -upgrade packer/

      # Build custom image with Packer
      - name: Build Custom Image
        id: build-ami
        run: |
          AMI_ID=$(packer build \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "instance_type=t2.micro" \
            -var "ami_users=[\"${{ secrets.AMI_USERS }}\"]" \
            . | grep -o 'ami-[0-9a-f]\{17\}' | tail -n 1)
          if [ -z "$AMI_ID" ]; then
            echo "Error: Failed to extract AMI ID from Packer output."
            exit 1
          fi
          echo "AMI ID: $AMI_ID"
          echo "ami-id=$AMI_ID" >> $GITHUB_OUTPUT
        working-directory: packer
        env:
          PACKER_LOG: 1

      - name: Debug AMI ID
        run: |
          echo "AMI ID from build-ami: ${{ steps.build-ami.outputs.ami-id }}"

      - name: Configure AWS Credentials for Demo
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ secrets.AWS_REGION }}
 
      - name: Update Launch Template with New AMI
        id: update-lt
        run: |
          # Step 1: Retrieve Launch Template ID by filtering on name prefix
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=launch-template-name,Values=myproject-lt-*" \
            --query "LaunchTemplates[0].LaunchTemplateId" \
            --output text)
          if [ -z "$LAUNCH_TEMPLATE_ID" ]; then
            echo "Error: Failed to retrieve the Launch Template ID for myproject-lt-*."
            exit 1
          fi
          echo "Launch Template ID: $LAUNCH_TEMPLATE_ID"
          echo "launch-template-id=$LAUNCH_TEMPLATE_ID" >> $GITHUB_OUTPUT
 
          # Step 2: Retrieve Latest Launch Template Version
          LATEST_VERSION=$(aws ec2 describe-launch-template-versions \
            --launch-template-id "$LAUNCH_TEMPLATE_ID" \
            --query "LaunchTemplateVersions[-1].VersionNumber" \
            --output text)
          if [ -z "$LATEST_VERSION" ]; then
            echo "Error: Failed to retrieve the latest version number for the Launch Template."
            exit 1
          fi
          echo "Latest Launch Template Version: $LATEST_VERSION"
 
          # Step 3: Create New Launch Template Version with New AMI
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id "$LAUNCH_TEMPLATE_ID" \
            --source-version "$LATEST_VERSION" \
            --launch-template-data "{\"ImageId\":\"${{ steps.build-ami.outputs.ami-id }}\"}" \
            --query "LaunchTemplateVersion.VersionNumber" \
            --output text)
          if [ -z "$NEW_VERSION" ]; then
            echo "Error: Failed to update the Launch Template with the new AMI."
            exit 1
          fi
          echo "New Launch Template Version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
 
          # Step 4: Set the New Version as Default
          aws ec2 modify-launch-template \
            --launch-template-id "$LAUNCH_TEMPLATE_ID" \
            --default-version "$NEW_VERSION"
          echo "Successfully updated the default Launch Template version to: $NEW_VERSION"
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Find Auto Scaling Group Name
        id: find-asg
        run: |
          # Find the actual ASG name that starts with myproject-asg-
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --query "AutoScalingGroups[?starts_with(AutoScalingGroupName, 'myproject-asg-')].AutoScalingGroupName" \
            --output text)
          if [ -z "$ASG_NAME" ]; then
            echo "Error: Failed to find Auto Scaling Group starting with myproject-asg-"
            exit 1
          fi
          echo "Auto Scaling Group found: $ASG_NAME"
          echo "asg-name=$ASG_NAME" >> $GITHUB_OUTPUT
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
 
      - name: Update Autoscaling Group
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ steps.find-asg.outputs.asg-name }} \
            --launch-template LaunchTemplateId=${{ steps.update-lt.outputs.launch-template-id }},Version=${{ steps.update-lt.outputs.version }}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
 
      - name: Trigger Instance Refresh
        id: refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ steps.find-asg.outputs.asg-name }} \
            --preferences '{"MinHealthyPercentage": 90}' \
            --query 'InstanceRefreshId' \
            --output text)
          echo "InstanceRefreshId=$REFRESH_ID" >> $GITHUB_OUTPUT
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
 
      - name: Wait for Instance Refresh
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ steps.find-asg.outputs.asg-name }} \
              --instance-refresh-ids ${{ steps.refresh.outputs.InstanceRefreshId }} \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            if [ "$STATUS" == "Successful" ] || [ "$STATUS" == "Failed" ]; then
              echo "Instance refresh completed with status: $STATUS"
              if [ "$STATUS" == "Failed" ]; then
                exit 1
              fi
              break
            fi
            echo "Waiting for instance refresh... Current status: $STATUS"
            sleep 30
          done
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}