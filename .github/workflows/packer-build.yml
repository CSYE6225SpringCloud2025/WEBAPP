name: Packer Build

on:
  pull_request:
    # types:
    #   - closed
    branches:
      - main

jobs:
  build:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Enable MySQL service
      - name: Enable mysql service
        run: sudo systemctl start mysql

      # Create .env file from secrets
      - name: Create .env File
        run: |
          echo "DB_NAME=${{ secrets.MYSQL_DATABASE }}" > src/.env
          echo "DB_USERNAME=${{ secrets.MYSQL_USER }}" >> src/.env
          echo "DB_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> src/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> src/.env
          echo "DB_PORT=${{ secrets.PORT }}" >> src/.env
          echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> src/.env

      # Install project dependencies
      - name: Install Project Dependencies
        run: npm install
        working-directory: src

      # Wait for MySQL to be ready
      - name: Wait for MySQL to be Ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      # Initialize MySQL database as root
      - name: Initialize MySQL Database as Root
        run: |
          sudo mysql -u"${{ secrets.MYSQL_USER }}" --password="${{ secrets.MYSQL_ROOT_PASSWORD }}" <<EOF
          CREATE DATABASE IF NOT EXISTS \`${{ secrets.MYSQL_DATABASE }}\`;
          EOF

      # Run tests
      - name: Run Tests
        run: npm test
        env:
          DB_NAME: ${{ secrets.MYSQL_DATABASE }}
          DB_USERNAME: ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.PORT }}
          DB_DIALECT: ${{secrets.DB_DIALECT }}
        working-directory: src

      # Install Packer
      - name: Install Packer
        uses: hashicorp/setup-packer@v2

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

      # Create JSON file from secret for Google Cloud authentication
      - name: Create JSON File from Secret
        run: |
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' | jq '.' > secret.json

      # Initialize Packer plugins
      - name: Initialize Packer Plugins
        run: packer init -upgrade packer/

      # Build custom image with Packer
      - name: Build Custom Image
        run: |
          packer build \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "db_password=${{ secrets.MYSQL_ROOT_PASSWORD }}" \
            -var "instance_type=t2.micro" \
            -var "ami_users=[\"${{ secrets.AMI_USERS }}\"]" \
            -var "credentials_file=secret.json" \
            packer/